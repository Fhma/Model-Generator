pre {
	var n_classes:Integer = (0.40 * total).ceiling();
	var n_attributes:Integer = (0.20 * total).ceiling();
	var n_vals:Integer = (0.20 * total).ceiling();
	var n_refs:Integer = (0.20 * total).ceiling();
	
	var names:Sequence = StringDB!Row.all.collect(e|e.first_name.toLowerCase()); // 299 names
	
	var ecore_datatypes = new Sequence; 
	ecore_datatypes.clear();
	ecore_datatypes.addAll(ECore!EDataType.all.select(e|e.serializable).excludingAll(ECore!EDataType.all.select(e|e.name = "EJavaClass" or e.name = "EJavaObject")));
	
	var styles = new Sequence;
	styles.add("solid");
	styles.add("dash");
	styles.add("dot");
	
	var figures = new Sequence;
	figures.add("rectangle");
	figures.add("ellipse");
	figures.add("rounded");
	figures.add("svg");
	figures.add("polygon");
	
	var decorations = new Sequence;
	decorations.add("none");
	decorations.add("arrow");
	decorations.add("rhomb");
	decorations.add("filledrhomb");
	decorations.add("square");
	decorations.add("filledsquare");
	decorations.add("closedarrow");
	decorations.add("filledclosedarrow");
	
	var layouts = new Sequence;
	layouts.add("free");
	layouts.add("list");
	
	var selected_names = new Sequence;
	
}

$instances n_classes
@list classes
operation Ecore!EClass create(){
	var name = nextFromCollection(names);
	while(Ecore!EClass.all.exists(e|e.name = name)){
		name = nextFromCollection(names);
	}
	self.name = name;
	var choice:Integer = nextInteger(1,10);
	if(choice.mod(2)=0)
		self.abstract = true;
}

$instances n_attributes
@list attribues
operation Ecore!EAttribute create(){
	var _c = nextFromList("classes");
	_c.eStructuralFeatures.add(self);
	var name = nextFromCollection(names);
	while(_c.eStructuralFeatures.exists(e|e.name = name)){
		name = nextFromCollection(names);
	}
	self.name = name;
	self.upperBound = nextInteger(1,10);
	self.lowerBound = nextInteger(0,self.upperBound);
	self.eType = nextFromCollection(ecore_datatypes);
}

$instances n_vals
@list vals
operation Ecore!EReference create(){
	self.containment = true;
	var _c = nextFromList("classes");
	_c.eStructuralFeatures.add(self);
	var name = nextFromCollection(names);
	while(_c.eStructuralFeatures.exists(e|e.name = name)){
		name = nextFromCollection(names);
	}
	self.name = name;
	self.upperBound = nextInteger(1,10);
	self.lowerBound = nextInteger(0,self.upperBound);
	self.eType = nextFromList("classes");
}

$instances n_refs
@list refs
operation Ecore!EReference create(){
	var _c = nextFromList("classes");
	_c.eStructuralFeatures.add(self);
	var name = nextFromCollection(names);
	while(_c.eStructuralFeatures.exists(e|e.name = name)){
		name = nextFromCollection(names);
	}
	self.name = name;
	self.upperBound = nextInteger(1,10);
	self.lowerBound = nextInteger(0,self.upperBound);
	self.eType = nextFromList("classes");
}

$instances 1
operation Ecore!EPackage create(){
	self.name = "ecore";
	self.eClassifiers.addAll(Ecore!EClass.all);
	self.nsURI="http://www.eclipse.org/emf/2002/Ecore";
	self.nsPrefix="Ecore";
}

post {
	var visited = new Set;
	var n:Integer;
	
	// do some inheritance 
	var classes = Ecore!EClass.all.select(e| not e.abstract and e.eSuperTypes.size() = 0);
	n = (nextInteger(1,classes.size)/2).ceiling();
	if(n = 0)
		n = 1;

	while(n >= 1) { 
		var c = nextFromCollection(classes.excludingAll(visited));
		visited.add(c);
		classes.remove(c);
		var target = nextFromCollection(classes.select(e|e <> c or not e.eSuperTypes.flatten.includes(c)));
		if(target.eSuperTypes.includes(c))
			throw "target [" +target.name+"] is selected for source ["+c.name+"]";
		c.eSuperTypes.add(target);
		n = n - 1;
	}
	
	classes = Ecore!EClass.all.select(e| not e.abstract);
	visited.clear();
	
	// do some annotations
	// gmf
	var anno = new Ecore!EAnnotation;
	anno.source = "gmf";
	Ecore!EPackage.all.first().eAnnotations.add(anno);
	
	// gmf.diagram
	var diagram = nextFromCollection(classes);
	visited.add(diagram);
	anno = new Ecore!EAnnotation;
	anno.source = "gmf.diagram";
	anno.details.put("diagram.extension","model");
	anno.details.put("model.extension","model");
	anno.details.put("onefile",""+nextBoolean());
	diagram.eAnnotations.add(anno);
		
	// gmf.node
	n = nextInteger(1,classes.excludingAll(visited).size());
	if(n=0)
		n=1;
	while(n>=1){
		var c = nextFromCollection(classes.excludingAll(visited));
		var features = c.eStructuralFeatures.select(e|e.isTypeOf(Ecore!EAttribute));
		visited.add(c);
		anno = new Ecore!EAnnotation;
		anno.source = "gmf.node";
		anno.details.put("border.color",nextInteger(0,256)+","+nextInteger(0,256)+","+nextInteger(0,256));
		anno.details.put("border.style",nextFromCollection(styles));
		anno.details.put("border.width",""+nextInteger(1,10));
		anno.details.put("","");
		anno.details.put("color",nextInteger(0,256)+","+nextInteger(0,256)+","+nextInteger(0,256));
		anno.details.put("figure",""+nextFromCollection(figures));
		if(not (features.size() = 0)) {
			anno.details.put("label",nextFromCollection(features).name);
			anno.details.put("label.color",nextInteger(0,256)+","+nextInteger(0,256)+","+nextInteger(0,256));
			anno.details.put("label.icon",""+nextBoolean());
		}
		if(anno.details.get("figure") = "svg")
		{
			anno.details.put("svg.uri","platform:/plugin/my.plugin/"+nextFromCollection(names));
		}
		if(anno.details.get("figure") = "polygon")
		{
			anno.details.put("polygon.x",""+nextInteger(1,10));
			anno.details.put("polygon.y",""+nextInteger(1,10));
		}
		c.eAnnotations.add(anno);
		n = n - 1;
	}
	
	// gmf link -> EClass and non-containment EReference
	visited.clear();
	visited.add(diagram);
	n = nextInteger(1,classes.size()-visited.size());
	if(n=0)
		n=1;
	while(n>=1) {
		var c = nextFromCollection(classes.excludingAll(visited));
		if(c.isUndefined())
			break;
		var features = c.eStructuralFeatures.select(e|e.isTypeOf(Ecore!EAttribute));
		var references = c.eStructuralFeatures.select(e|e.isTypeOf(Ecore!EReference) and not e.containment);
		
		visited.add(c);
		var choice = nextInteger(1,10);
		anno = new Ecore!EAnnotation;
		anno.source = "gmf.link";
		anno.details.put("color",nextInteger(0,256)+","+nextInteger(0,256)+","+nextInteger(0,256));
		anno.details.put("style",nextFromCollection(styles));
		if(not (features.size()=0))
			anno.details.put("label",nextFromCollection(features).name);
		if(choice.mod(2)=0 and references.size()>=2) {
			anno.details.put("source",nextFromCollection(references).name);
			anno.details.put("target",nextFromCollection(references).name);
		}
		anno.details.put("source.decoration",nextFromCollection(decorations));
		anno.details.put("target.decoration",nextFromCollection(decorations));
		anno.details.put("width",""+nextInteger(1,10));
		c.eAnnotations.add(anno);
		n = n - 1;
	}
	
	// gmf.compartment
	var vals = Ecore!EReference.all.select(e| e.containment);
	visited.clear();
	n = nextInteger(1,(vals.size()-visited.size())/2);
	if(n=0)
		n=1;
	while(n>=1){
		var f = nextFromCollection(vals.excludingAll(visited));
		visited.add(f);
		anno = new Ecore!EAnnotation;
		anno.source = "gmf.compartment";
		anno.details.put("collapsible",""+nextBoolean());
		anno.details.put("layout",nextFromCollection(layouts));
		f.eAnnotations.add(anno);
		n = n -1;
	}
}


